# Load necessary libraries
library(tidyr)
library(data.table)
library(plotly)
library(RColorBrewer)
library(stringr)
library(optiRum)
library(dplyr)
library("rjson")
# set your working directory - change as needed
setwd("C:/Users/L.GonzalezMorales/OneDrive - United Nations/UNCT - Toolkit/Data availability/")
# load functions
source('code/f_read.tab2dataTable.r')
source('code/f_writeTable2tab.r')
source('code/f_h_barplot_stacked.r')
source('code/f_h_barplot.r')
source('code/f_v_barplot.r')
source('code/f_doughnut.r')
source('code/f_doughnut2.r')
#----------------------------------
# Read data
#----------------------------------
availability_data <- read.tab2dataTable("data/IndicatorAvailability20190306.txt")
cr_countries <- read.tab2dataTable("data/RC-List-Merged.txt")
json_colors <- fromJSON(file="data/sdg_colors.json")
colors <- lapply(json_colors, function(sdg) # Loop through each "play"
{
# Convert each group to a data frame.
# This assumes you have 6 elements each time
data.frame(matrix(unlist(sdg), ncol=15, byrow=T))
})
# Now you have a list of data frames, connect them together in
# one single dataframe
colors <- do.call(rbind, colors)
# Make column names nicer, remove row names
colnames(colors) <- c("GoalCode", "hex", "rgb.1", "rgb.2", "rgb.3", "iconUrl",
"color1","color2","color3","color4","color5","color6","color7","color8","credits")
rownames(colors) <- NULL
#==========================================================
# The arguments to gather():
# - data: Data object
# - key: Name of new key column (made from names of data columns)
# - value: Name of new value column
# - ...: Names of source columns that contain values
# - factor_key: Treat the new key column as a factor (instead of character vector)
availability_data <- gather(availability_data, country, dataPoints, X4_Afghanistan:X894_Zambia, factor_key=FALSE)
availability_data <- separate(availability_data, country, c("countryCode", "countryName"), sep = "_")
availability_data <- as.data.table(availability_data)
availability_data[,countryCode := gsub("X","", countryCode)]
availability_data[,countryName := gsub("\\."," ", countryName)]
availability_data <- availability_data[, countryCode:=as.numeric(countryCode)]
#===========================================================
# merge cr countries
availability_data <- merge(availability_data, cr_countries, by.x = "countryCode", by.y = "M49", all = TRUE,
suffixes = c("",".CR"))
availability_data[,isRC1 := !is.na(List1_excel)]
availability_data[,isRC2 := !is.na(List2_pdf)]
NA                                 "Tier I"
[3] "Tier II"                          "Tier III"
[5] "Tier I/II/III depending on index" "Tier I (a)/ Tier II (b)"
[7] "Tier I (ODA)/ Tier II (FDI)"      "Tier I/III"
#===========================================================
availability_data[,TierX := ifelse(Tier%in%c("Tier I",
"Tier I/II/III depending on index",
"Tier I (a)/ Tier II (b)",
"Tier I (ODA)/ Tier II (FDI)",
"Tier I/III"),"Tier I*",
Tier)]
availability_data[, hasData := ifelse(dataPoints > 0 , 1, 0)]
T1 <- availability_data[, .(indicatorsAvailable = sum(hasData, na.rm = TRUE), .N),
by=list(countryCode, countryName,Country,ISO, isRC1, isRC2, TierX)]
T1[,percent := indicatorsAvailable / N]
# Load necessary libraries
library(tidyr)
library(data.table)
library(plotly)
library(RColorBrewer)
library(stringr)
library(optiRum)
library(dplyr)
library("rjson")
# set your working directory - change as needed
setwd("C:/Users/L.GonzalezMorales/OneDrive - United Nations/UNCT - Toolkit/Data availability/")
# load functions
source('code/f_read.tab2dataTable.r')
source('code/f_writeTable2tab.r')
source('code/f_h_barplot_stacked.r')
source('code/f_h_barplot.r')
source('code/f_v_barplot.r')
source('code/f_doughnut.r')
source('code/f_doughnut2.r')
#----------------------------------
# Read data
#----------------------------------
availability_data <- read.tab2dataTable("data/IndicatorAvailability20190306.txt")
cr_countries <- read.tab2dataTable("data/RC-List-Merged.txt")
json_colors <- fromJSON(file="data/sdg_colors.json")
colors <- lapply(json_colors, function(sdg) # Loop through each "play"
{
# Convert each group to a data frame.
# This assumes you have 6 elements each time
data.frame(matrix(unlist(sdg), ncol=15, byrow=T))
})
# Now you have a list of data frames, connect them together in
# one single dataframe
colors <- do.call(rbind, colors)
# Make column names nicer, remove row names
colnames(colors) <- c("GoalCode", "hex", "rgb.1", "rgb.2", "rgb.3", "iconUrl",
"color1","color2","color3","color4","color5","color6","color7","color8","credits")
rownames(colors) <- NULL
#==========================================================
# The arguments to gather():
# - data: Data object
# - key: Name of new key column (made from names of data columns)
# - value: Name of new value column
# - ...: Names of source columns that contain values
# - factor_key: Treat the new key column as a factor (instead of character vector)
availability_data <- gather(availability_data, country, dataPoints, X4_Afghanistan:X894_Zambia, factor_key=FALSE)
availability_data <- separate(availability_data, country, c("countryCode", "countryName"), sep = "_")
availability_data <- as.data.table(availability_data)
availability_data[,countryCode := gsub("X","", countryCode)]
availability_data[,countryName := gsub("\\."," ", countryName)]
availability_data <- availability_data[, countryCode:=as.numeric(countryCode)]
#===========================================================
# merge cr countries
availability_data <- merge(availability_data, cr_countries, by.x = "countryCode", by.y = "M49", all = TRUE,
suffixes = c("",".CR"))
availability_data[,isRC1 := !is.na(List1_excel)]
availability_data[,isRC2 := !is.na(List2_pdf)]
#===========================================================
availability_data[,TierX := ifelse(Tier%in%c("Tier I",
"Tier I/II/III depending on index",
"Tier I (a)/ Tier II (b)",
"Tier I (ODA)/ Tier II (FDI)",
"Tier I/III"),"Tier I*",
Tier)]
availability_data[, hasData := ifelse(dataPoints > 0 , 1, 0)]
T1 <- availability_data[, .(indicatorsAvailable = sum(hasData, na.rm = TRUE), .N),
by=list(countryCode, countryName,Country,ISO, isRC1, isRC2, TierX)]
T1[,percent := indicatorsAvailable / N]
View(T1)
# Load necessary libraries
library(tidyr)
library(data.table)
library(plotly)
library(RColorBrewer)
library(stringr)
library(optiRum)
library(dplyr)
library("rjson")
# set your working directory - change as needed
setwd("C:/Users/L.GonzalezMorales/OneDrive - United Nations/UNCT - Toolkit/Data availability/")
# load functions
source('code/f_read.tab2dataTable.r')
source('code/f_writeTable2tab.r')
source('code/f_h_barplot_stacked.r')
source('code/f_h_barplot.r')
source('code/f_v_barplot.r')
source('code/f_doughnut.r')
source('code/f_doughnut2.r')
#----------------------------------
# Read data
#----------------------------------
availability_data <- read.tab2dataTable("data/IndicatorAvailability20190306.txt")
cr_countries <- read.tab2dataTable("data/RC-List-Merged.txt")
json_colors <- fromJSON(file="data/sdg_colors.json")
colors <- lapply(json_colors, function(sdg) # Loop through each "play"
{
# Convert each group to a data frame.
# This assumes you have 6 elements each time
data.frame(matrix(unlist(sdg), ncol=15, byrow=T))
})
# Now you have a list of data frames, connect them together in
# one single dataframe
colors <- do.call(rbind, colors)
# Make column names nicer, remove row names
colnames(colors) <- c("GoalCode", "hex", "rgb.1", "rgb.2", "rgb.3", "iconUrl",
"color1","color2","color3","color4","color5","color6","color7","color8","credits")
rownames(colors) <- NULL
#==========================================================
# The arguments to gather():
# - data: Data object
# - key: Name of new key column (made from names of data columns)
# - value: Name of new value column
# - ...: Names of source columns that contain values
# - factor_key: Treat the new key column as a factor (instead of character vector)
availability_data <- gather(availability_data, country, dataPoints, X4_Afghanistan:X894_Zambia, factor_key=FALSE)
availability_data <- separate(availability_data, country, c("countryCode", "countryName"), sep = "_")
availability_data <- as.data.table(availability_data)
availability_data[,countryCode := gsub("X","", countryCode)]
availability_data[,countryName := gsub("\\."," ", countryName)]
availability_data <- availability_data[, countryCode:=as.numeric(countryCode)]
#===========================================================
# merge cr countries
availability_data <- merge(availability_data, cr_countries, by.x = "countryCode", by.y = "M49", all = TRUE,
suffixes = c("",".CR"))
availability_data[,isRC1 := !is.na(List1_excel)]
availability_data[,isRC2 := !is.na(List2_pdf)]
#===========================================================
availability_data[,TierX := ifelse(Tier%in%c("Tier I",
"Tier I/II/III depending on index",
"Tier I (a)/ Tier II (b)",
"Tier I (ODA)/ Tier II (FDI)",
"Tier I/III"),"Tier I*",
Tier)]
availability_data[, hasData := ifelse(dataPoints > 0 , 1, 0)]
T1 <- availability_data[, .(indicatorsAvailable = sum(hasData, na.rm = TRUE), .N),
by=list(countryCode, countryName,Country,ISO, isRC1, isRC2, TierX)]
T1[,percent := indicatorsAvailable / N * 100]
View(T1)
T2.rc.excel <- availability_data[, .(countriesAvailable = sum(hasData, na.rm = TRUE), .N),
by=list(isRC1, Goal, Indicator, IndicatorCode, IndicatorDescription, TierX)]
View(T2.rc.excel)
T2.rc.excel <- availability_data[, .(countriesAvailable = sum(hasData, na.rm = TRUE), .N),
by=list(isRC1, Goal, Indicator, IndicatorCode, IndicatorDescription, TierX)]
T2.rc.excel[,percent := countriesAvailable / N * 100]
T2.rc.excel[,Has75percentPlus := ifelse(percent>-75,1,0)]
View(T2.rc.excel)
#===========================================================
T2.rc.excel <- availability_data[, .(countriesAvailable = sum(hasData, na.rm = TRUE), .N),
by=list(isRC1, Goal, Indicator, IndicatorCode, IndicatorDescription, TierX)]
T2.rc.excel[,percent := countriesAvailable / N * 100]
T2.rc.excel[,Has75percentPlus := ifelse(percent>=75,1,0)]
View(T2.rc.excel)
#===========================================================
T2.rc.pdf <- availability_data[, .(countriesAvailable = sum(hasData, na.rm = TRUE), .N),
by=list(isRC2, Goal, Indicator, IndicatorCode, IndicatorDescription, TierX)]
T2.rc.pdf[,percent := countriesAvailable / N * 100]
T2.rc.pdf[,Has75percentPlus := ifelse(percent>=75,1,0)]
View(T2.rc.pdf)
View(T1)
T1[,N2 := ifelse(TierX == "Tier I*", 107,
ifelse(TierX == "Tier II", 84, 41))]
T1[,percent2 := indicatorsAvailable / N2 * 100]
View(T1)
View(writeTable2tab)
writeTable2tab(availability_data, "availability_data.txt")
View(T2.rc.excel)
View(T2.rc.pdf)
# Load necessary libraries
library(tidyr)
library(data.table)
library(plotly)
library(RColorBrewer)
library(stringr)
library(optiRum)
library(dplyr)
library("rjson")
# set your working directory - change as needed
setwd("C:/Users/L.GonzalezMorales/OneDrive - United Nations/UNCT - Toolkit/Data availability/")
# load functions
source('code/f_read.tab2dataTable.r')
source('code/f_writeTable2tab.r')
source('code/f_h_barplot_stacked.r')
source('code/f_h_barplot.r')
source('code/f_v_barplot.r')
source('code/f_doughnut.r')
source('code/f_doughnut2.r')
#----------------------------------
# Read data
#----------------------------------
availability_data <- read.tab2dataTable("data/IndicatorAvailability20190306.txt")
cr_countries <- read.tab2dataTable("data/RC-List-Merged.txt")
json_colors <- fromJSON(file="data/sdg_colors.json")
colors <- lapply(json_colors, function(sdg) # Loop through each "play"
{
# Convert each group to a data frame.
# This assumes you have 6 elements each time
data.frame(matrix(unlist(sdg), ncol=15, byrow=T))
})
# Now you have a list of data frames, connect them together in
# one single dataframe
colors <- do.call(rbind, colors)
# Make column names nicer, remove row names
colnames(colors) <- c("GoalCode", "hex", "rgb.1", "rgb.2", "rgb.3", "iconUrl",
"color1","color2","color3","color4","color5","color6","color7","color8","credits")
rownames(colors) <- NULL
#==========================================================
# The arguments to gather():
# - data: Data object
# - key: Name of new key column (made from names of data columns)
# - value: Name of new value column
# - ...: Names of source columns that contain values
# - factor_key: Treat the new key column as a factor (instead of character vector)
availability_data <- gather(availability_data, country, dataPoints, X4_Afghanistan:X894_Zambia, factor_key=FALSE)
availability_data <- separate(availability_data, country, c("countryCode", "countryName"), sep = "_")
availability_data <- as.data.table(availability_data)
availability_data[,countryCode := gsub("X","", countryCode)]
availability_data[,countryName := gsub("\\."," ", countryName)]
availability_data <- availability_data[, countryCode:=as.numeric(countryCode)]
#===========================================================
# merge cr countries
availability_data <- merge(availability_data, cr_countries, by.x = "countryCode", by.y = "M49", all = TRUE,
suffixes = c("",".CR"))
availability_data[,isRC1 := !is.na(List1_excel)]
availability_data[,isRC2 := !is.na(List2_pdf)]
#===========================================================
availability_data[,TierX := ifelse(Tier%in%c("Tier I",
"Tier I/II/III depending on index",
"Tier I (a)/ Tier II (b)",
"Tier I (ODA)/ Tier II (FDI)",
"Tier I/III"),"Tier I*",
Tier)]
availability_data[, hasData := ifelse(dataPoints > 0 , 1, 0)]
writeTable2tab(availability_data, "availability_data.txt")
#===========================================================
T1 <- availability_data[, .(indicatorsAvailable = sum(hasData, na.rm = TRUE), .N),
by=list(countryCode, countryName,Country,ISO, isRC1, isRC2, TierX)]
T1[,percent := indicatorsAvailable / N * 100]
T1[,N2 := ifelse(TierX == "Tier I*", 107,
ifelse(TierX == "Tier II", 84, 41))]
T1[,percent2 := indicatorsAvailable / N2 * 100]
#===========================================================
T2.rc.excel <- availability_data[, .(countriesAvailable = sum(hasData, na.rm = TRUE), .N),
by=list(isRC1, Goal, Indicator, IndicatorCode, IndicatorDescription, TierX)]
T2.rc.excel[,percent := countriesAvailable / N * 100]
T2.rc.excel[,Has75percentPlus := ifelse(percent>=75,1,0)]
#===========================================================
T2.rc.pdf <- availability_data[, .(countriesAvailable = sum(hasData, na.rm = TRUE), .N),
by=list(isRC2, Goal, Indicator, IndicatorCode, IndicatorDescription, TierX)]
T2.rc.pdf[,percent := countriesAvailable / N * 100]
T2.rc.pdf[,Has75percentPlus := ifelse(percent>=75,1,0)]
View(T2.rc.excel)
T2 <- availability_data[, .(countriesAvailable = sum(hasData, na.rm = TRUE), .N),
by=list(Goal, Indicator, IndicatorCode, IndicatorDescription, TierX)]
T2[,percent := countriesAvailable / N * 100]
T2[,Has75percentPlus := ifelse(percent>=75,1,0)]
View(T2)
View(T2.rc.excel)
View(T2.rc.pdf)
writeTable2tab(T1, "T1-availability-by-country-and-tier.txt")
writeTable2tab(T1, "T1-availability-by-indicator-193.txt")
View(T2.rc.excel)
writeTable2tab(T2.rc.excel, "T2-availability-by-indicator-and-rc-128.txt")
View(T2.rc.pdf)
writeTable2tab(T2.rc.pdf, "T2-availability-by-indicator-and-rc-127.txt")
# Load necessary libraries
library(tidyr)
library(data.table)
library(plotly)
library(RColorBrewer)
library(stringr)
library(optiRum)
library(dplyr)
library("rjson")
# set your working directory - change as needed
setwd("C:/Users/L.GonzalezMorales/OneDrive - United Nations/UNCT - Toolkit/Data availability/")
# load functions
source('code/f_read.tab2dataTable.r')
source('code/f_writeTable2tab.r')
source('code/f_h_barplot_stacked.r')
source('code/f_h_barplot.r')
source('code/f_v_barplot.r')
source('code/f_doughnut.r')
source('code/f_doughnut2.r')
#----------------------------------
# Read data
#----------------------------------
availability_data <- read.tab2dataTable("data/IndicatorAvailability20190306.txt")
cr_countries <- read.tab2dataTable("data/RC-List-Merged.txt")
json_colors <- fromJSON(file="data/sdg_colors.json")
colors <- lapply(json_colors, function(sdg) # Loop through each "play"
{
# Convert each group to a data frame.
# This assumes you have 6 elements each time
data.frame(matrix(unlist(sdg), ncol=15, byrow=T))
})
# Now you have a list of data frames, connect them together in
# one single dataframe
colors <- do.call(rbind, colors)
# Make column names nicer, remove row names
colnames(colors) <- c("GoalCode", "hex", "rgb.1", "rgb.2", "rgb.3", "iconUrl",
"color1","color2","color3","color4","color5","color6","color7","color8","credits")
rownames(colors) <- NULL
#==========================================================
# The arguments to gather():
# - data: Data object
# - key: Name of new key column (made from names of data columns)
# - value: Name of new value column
# - ...: Names of source columns that contain values
# - factor_key: Treat the new key column as a factor (instead of character vector)
availability_data <- gather(availability_data, country, dataPoints, X4_Afghanistan:X894_Zambia, factor_key=FALSE)
availability_data <- separate(availability_data, country, c("countryCode", "countryName"), sep = "_")
availability_data <- as.data.table(availability_data)
availability_data[,countryCode := gsub("X","", countryCode)]
availability_data[,countryName := gsub("\\."," ", countryName)]
availability_data <- availability_data[, countryCode:=as.numeric(countryCode)]
#===========================================================
# merge cr countries
availability_data <- merge(availability_data, cr_countries, by.x = "countryCode", by.y = "M49", all = TRUE,
suffixes = c("",".CR"))
availability_data[,isRC := !is.na(List_final)]
#===========================================================
availability_data[,TierX := ifelse(Tier%in%c("Tier I",
"Tier I/II/III depending on index",
"Tier I (a)/ Tier II (b)",
"Tier I (ODA)/ Tier II (FDI)",
"Tier I/III"),"Tier I*",
Tier)]
availability_data[, hasData := ifelse(dataPoints > 0 , 1, 0)]
writeTable2tab(availability_data, "availability_data.txt")
#===========================================================
T1 <- availability_data[, .(indicatorsAvailable = sum(hasData, na.rm = TRUE), .N),
by=list(countryCode, countryName,Country,ISO, isRC1, isRC2, TierX)]
T1[,percent := indicatorsAvailable / N * 100]
T1[,N2 := ifelse(TierX == "Tier I*", 107,
ifelse(TierX == "Tier II", 84, 41))]
T1[,percent2 := indicatorsAvailable / N2 * 100]
writeTable2tab(T1, "T1-availability-by-country-and-tier.txt")
#===========================================================
T2 <- availability_data[, .(countriesAvailable = sum(hasData, na.rm = TRUE), .N),
by=list(Goal, Indicator, IndicatorCode, IndicatorDescription, TierX)]
T2[,percent := countriesAvailable / N * 100]
T2[,Has75percentPlus := ifelse(percent>=75,1,0)]
writeTable2tab(T1, "T1-availability-by-indicator-193.txt")
#===========================================================
T2.rc <- availability_data[, .(countriesAvailable = sum(hasData, na.rm = TRUE), .N),
by=list(isRC1, Goal, Indicator, IndicatorCode, IndicatorDescription, TierX)]
T2.rc[,percent := countriesAvailable / N * 100]
T2.rc[,Has75percentPlus := ifelse(percent>=75,1,0)]
writeTable2tab(T2.rc, "T2-availability-by-indicator-and-rc-131.txt")
T2.rc <- availability_data[, .(countriesAvailable = sum(hasData, na.rm = TRUE), .N),
by=list(isRC, Goal, Indicator, IndicatorCode, IndicatorDescription, TierX)]
T2.rc[,percent := countriesAvailable / N * 100]
T2.rc[,Has75percentPlus := ifelse(percent>=75,1,0)]
writeTable2tab(T2.rc, "T2-availability-by-indicator-and-rc-131.txt")
# Load necessary libraries
library(tidyr)
library(data.table)
library(plotly)
library(RColorBrewer)
library(stringr)
library(optiRum)
library(dplyr)
library("rjson")
# set your working directory - change as needed
setwd("C:/Users/L.GonzalezMorales/OneDrive - United Nations/UNCT - Toolkit/Data availability/")
# load functions
source('code/f_read.tab2dataTable.r')
source('code/f_writeTable2tab.r')
source('code/f_h_barplot_stacked.r')
source('code/f_h_barplot.r')
source('code/f_v_barplot.r')
source('code/f_doughnut.r')
source('code/f_doughnut2.r')
#----------------------------------
# Read data
#----------------------------------
availability_data <- read.tab2dataTable("data/IndicatorAvailability20190306.txt")
cr_countries <- read.tab2dataTable("data/RC-List-Merged.txt")
json_colors <- fromJSON(file="data/sdg_colors.json")
colors <- lapply(json_colors, function(sdg) # Loop through each "play"
{
# Convert each group to a data frame.
# This assumes you have 6 elements each time
data.frame(matrix(unlist(sdg), ncol=15, byrow=T))
})
# Now you have a list of data frames, connect them together in
# one single dataframe
colors <- do.call(rbind, colors)
# Make column names nicer, remove row names
colnames(colors) <- c("GoalCode", "hex", "rgb.1", "rgb.2", "rgb.3", "iconUrl",
"color1","color2","color3","color4","color5","color6","color7","color8","credits")
rownames(colors) <- NULL
#==========================================================
# The arguments to gather():
# - data: Data object
# - key: Name of new key column (made from names of data columns)
# - value: Name of new value column
# - ...: Names of source columns that contain values
# - factor_key: Treat the new key column as a factor (instead of character vector)
availability_data <- gather(availability_data, country, dataPoints, X4_Afghanistan:X894_Zambia, factor_key=FALSE)
availability_data <- separate(availability_data, country, c("countryCode", "countryName"), sep = "_")
availability_data <- as.data.table(availability_data)
availability_data[,countryCode := gsub("X","", countryCode)]
availability_data[,countryName := gsub("\\."," ", countryName)]
availability_data <- availability_data[, countryCode:=as.numeric(countryCode)]
#===========================================================
# merge cr countries
availability_data <- merge(availability_data, cr_countries, by.x = "countryCode", by.y = "M49", all = TRUE,
suffixes = c("",".CR"))
availability_data[,isRC := !is.na(List_final)]
#===========================================================
availability_data[,TierX := ifelse(Tier%in%c("Tier I",
"Tier I/II/III depending on index",
"Tier I (a)/ Tier II (b)",
"Tier I (ODA)/ Tier II (FDI)",
"Tier I/III"),"Tier I*",
Tier)]
availability_data[, hasData := ifelse(dataPoints > 0 , 1, 0)]
writeTable2tab(availability_data, "availability_data.txt")
#===========================================================
T1 <- availability_data[, .(indicatorsAvailable = sum(hasData, na.rm = TRUE), .N),
by=list(countryCode, countryName,Country,ISO, isRC, TierX)]
T1[,percent := indicatorsAvailable / N * 100]
T1[,N2 := ifelse(TierX == "Tier I*", 107,
ifelse(TierX == "Tier II", 84, 41))]
T1[,percent2 := indicatorsAvailable / N2 * 100]
writeTable2tab(T1, "T1-availability-by-country-and-tier.txt")
#===========================================================
T2 <- availability_data[, .(countriesAvailable = sum(hasData, na.rm = TRUE), .N),
by=list(Goal, Indicator, IndicatorCode, IndicatorDescription, TierX)]
T2[,percent := countriesAvailable / N * 100]
T2[,Has75percentPlus := ifelse(percent>=75,1,0)]
writeTable2tab(T1, "T1-availability-by-indicator-193.txt")
#===========================================================
T2.rc <- availability_data[, .(countriesAvailable = sum(hasData, na.rm = TRUE), .N),
by=list(isRC, Goal, Indicator, IndicatorCode, IndicatorDescription, TierX)]
T2.rc[,percent := countriesAvailable / N * 100]
T2.rc[,Has75percentPlus := ifelse(percent>=75,1,0)]
writeTable2tab(T2.rc, "T2-availability-by-indicator-and-rc-131.txt")
View(availability_data)
